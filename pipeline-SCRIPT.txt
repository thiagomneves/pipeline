pipeline {
    agent any


    stages {


        stage('Checkout Repository') {
            steps {

                checkoutGitRepository()
                script{
                    GIT_COMMIT_HASH = getRevision()
                }
            }

        }

        stage('Test Code') {
            steps {
                runningMavenTest()
            }
        }

        stage('Build') {
            steps {
                pushImageStep()
            }
        }

        stage('Deploy') {
            steps {
                replaceDeploymentFile()
                deployKubernetePod()
            }

        }

        stage('Finishing') {
            steps {
                removeImagesDocker()
            }
        }
    }
}



def checkoutGitRepository(){
    git branch: 'sem_config_server',
            credentialsId: 'git',
            url: "git@github.com:thiagomneves/${JOB_NAME}.git"

}

def runningMavenTest(){
    bat "mvn test"
}


def pushImageStep(){

    bat "docker build -t ${JOB_NAME} ."
    bat "docker login docker.io"
    bat "docker tag ${getImageId()} thiagomneves/swapi:${JOB_NAME}-"+GIT_COMMIT_HASH
    bat "docker push thiagomneves/swapi:${JOB_NAME}-"+GIT_COMMIT_HASH

}

def getImageId(){
    def cmdReturn = bat(returnStdout: true, script: "docker images ${JOB_NAME} | awk \"NR > 1 { print \$3 } \" ").trim()
    return cmdReturn.readLines().drop(1).join(" ")
    
}

def getRevision() {
    def revReturn = bat(returnStdout: true, script: "git rev-parse HEAD").trim()
    return revReturn.readLines().drop(1).join(" ")
}

def replaceDeploymentFile(){

    readContent = readFile 'k8s/deployment.yaml'
                    
               
    readContent = readContent.replaceAll('\\$dck-accountid',"thiagomneves")
    readContent = readContent.replaceAll('\\$dck-repository',"swapi")
    readContent = readContent.replaceAll('\\$artifactory',"${JOB_NAME}")
    readContent = readContent.replaceAll('\\$githash',GIT_COMMIT_HASH)
    writeFile file: "k8s/deployment.yaml", text: "${readContent}"

}

def deployKubernetePod(){
    dir("k8s") {
        bat 'kubectl apply -k .'
    }
}

def removeImagesDocker(){
    bat "docker rmi ${getImageId()} --force"
}

return this