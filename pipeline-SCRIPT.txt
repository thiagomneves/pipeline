pipeline {
    agent any


    stages {


        stage('Checkout Repository') {
            steps {

                checkoutGitRepository()
                script{
                    GIT_COMMIT_HASH = sh (script: "git log -n 1 --pretty=format:'%H'", returnStdout: true)
                }
            }

        }

        stage('Test Code') {
            steps {
                runningMavenTest()
            }
        }

        stage('Build') {
            steps {
                pushImageStep()
            }
        }

        stage('Deploy') {
            steps {
                replaceDeploymentFile()
                deployKubernetePod()
            }

        }

        stage('Finishing') {
            steps {
                removeImagesDocker()
            }
        }
    }
}



def checkoutGitRepository(){
    git branch: env.BRANCH_NAME.replaceAll('origin/',''),
            credentialsId: 'git',
            url: "git@github.com:<SEUREPOSITORIOGITHUB>/${JOB_NAME}.git"

}

def runningMavenTest(){
    sh "mvn test"
}


def pushImageStep(){

    sh "docker build -t ${JOB_NAME} ."
    sh "docker login docker.io"
    sh "docker tag \$(docker images ${JOB_NAME} | awk 'NR > 1 { print \$3 }' ) <SUACONTANODOCKERHUB>/<SEUREPOSITORIONODOCKERHUB>:${JOB_NAME}-"+GIT_COMMIT_HASH
    sh "docker push :${JOB_NAME}-"+GIT_COMMIT_HASH

}

def replaceDeploymentFile(){

    readContent = readFile 'k8s/deployment.yaml'
                    
               
    readContent = readContent.replaceAll('\\$dck-accountid',"<SUACONTANODOCKERHUB>")
    readContent = readContent.replaceAll('\\$dck-repository',"<SEUREPOSITORIONODOCKERHUB>")
    readContent = readContent.replaceAll('\\$artifactory',"${JOB_NAME}")
    readContent = readContent.replaceAll('\\$githash',GIT_COMMIT_HASH)
    writeFile file: "k8s/deployment.yaml", text: "${readContent}"

}

def deployKubernetePod(){
    dir("k8s") {
        sh 'kubectl apply -k .'
    }
}

def removeImagesDocker(){
    sh "docker rmi \$(docker images ${JOB_NAME} | awk 'NR > 1 { print \$3 }' ) --force"
}

return this